//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer View
// {
//
//   row_major float4x4 View_View_SVPositionToTranslatedWorld;// Offset:  768 Size:    64
//   float3 View_View_ViewTilePosition; // Offset: 1024 Size:    12
//   float3 View_View_RelativePreViewTranslation;// Offset: 1216 Size:    12
//   float4 View_View_TemporalAAJitter; // Offset: 2000 Size:    16
//   float4 View_View_ViewRectMin;      // Offset: 2048 Size:    16
//   float4 View_View_ViewSizeAndInvSize;// Offset: 2064 Size:    16
//   float View_View_PreExposure;       // Offset: 2184 Size:     4
//   float View_View_OutOfBoundsMask;   // Offset: 2256 Size:     4
//   float View_View_bCheckerboardSubsurfaceProfileRendering;// Offset: 3656 Size:     4 [unused]
//
// }
//
// cbuffer Material
// {
//
//   float4 Material_Material_PreshaderBuffer[12];// Offset:    0 Size:   192
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// View_MaterialTextureBilinearWrapedSampler    sampler      NA          NA             s0      1 
// View_LandscapeWeightmapSampler    sampler      NA          NA             s1      1 
// View_PrimitiveSceneData           texture    byte         r/o             t0      1 
// Material_Texture2D_0              texture  float4          2d             t1      1 
// Material_Texture2D_1              texture  float4          2d             t2      1 
// Material_Texture2D_2              texture  float4          2d             t3      1 
// Material_Texture2D_3              texture  float4          2d             t4      1 
// View                              cbuffer      NA          NA            cb0      1 
// Material                          cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xy  
// TEXCOORD                 1   xyzw        1     NONE   float     zw
// PRIMITIVE_ID             0   x           2     NONE    uint   x   
// VELOCITY_PREV_POS        0   xyzw        3     NONE   float   xyzw
// SV_Position              0   xyzw        4      POS   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                4   xyzw        4   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[142], immediateIndexed
dcl_constantbuffer CB1[12], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_raw t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v0.xy
dcl_input_ps linear v1.zw
dcl_input_ps constant v2.x
dcl_input_ps linear v3.xyzw
dcl_input_ps_siv linear noperspective v4.xyzw, position
dcl_output o0.xyzw
dcl_output o4.xyzw
dcl_temps 7
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.zwzz, t1.xyzw, s1
mul r1.xy, v0.xyxx, cb1[2].xxxx
sample_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyxx, t2.xyzw, s0
mul r2.xy, v0.xyxx, cb1[4].wwww
sample_indexable(texture2d)(float,float,float,float) r1.w, r2.xyxx, t2.xzwy, s0
mul r2.xy, v0.xyxx, cb1[6].wwww
sample_indexable(texture2d)(float,float,float,float) r2.x, r2.xyxx, t3.xyzw, s0
mul r2.yz, v0.xxyx, l(0.000000, 0.300000, 0.300000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r2.yzw, r2.yzyy, t4.wxyz, s0
add r3.xyz, -r2.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r3.xyz, r3.xyzx, cb1[9].xyzx
mad r3.xyz, -r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(1.000000, 1.000000, 1.000000, 0.000000)
mul r4.xyz, r2.yzwy, cb1[8].xyzx
add r4.xyz, r4.xyzx, r4.xyzx
imul null, r3.w, v2.x, l(672)
ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r3.w, r3.w, t0.xxxx
and r3.w, r3.w, l(32)
if_nz r3.w
  add r5.xy, v4.xyxx, -cb0[128].xyxx
  mad r5.xy, r5.xyxx, cb0[129].zwzz, l(-0.500000, -0.500000, 0.000000, 0.000000)
  mul r5.xy, r5.xyxx, v4.wwww
  mov r5.zw, v4.zzzw
  mov r6.xyw, l(2.000000,-2.000000,0,1.000000)
  mov r6.z, v4.w
  mul r5.xyzw, r5.xyzw, r6.xyzw
  div r5.xyz, r5.zxyz, r5.wwww
  div r6.xyz, v3.zxyz, v3.wwww
  add r3.w, r5.x, -r6.x
  add r5.xy, r5.yzyy, -cb0[125].xyxx
  add r5.zw, r6.yyyz, -cb0[125].zzzw
  add r5.xy, -r5.zwzz, r5.xyxx
  lt r5.zw, l(0.000000, 0.000000, 0.000000, 0.000000), r5.xxxy
  lt r6.xy, r5.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
  iadd r5.zw, -r5.zzzw, r6.xxxy
  itof r5.zw, r5.zzzw
  sqrt r5.xy, |r5.xyxx|
  mul r5.xy, r5.xyxx, r5.zwzz
  mad o4.xy, r5.xyxx, l(0.352846, 0.352846, 0.000000, 0.000000), l(0.499992, 0.499992, 0.000000, 0.000000)
  ushr r4.w, r3.w, l(16)
  utof r4.w, r4.w
  mad r4.w, r4.w, l(0.000015), l(0.000002)
  min o4.z, r4.w, l(1.000000)
  and r3.w, r3.w, l(0x0000ffff)
  utof r3.w, r3.w
  mad r3.w, r3.w, l(0.000015), l(0.000002)
  min o4.w, r3.w, l(1.000000)
else 
  mov o4.xyzw, l(0,0,0,0)
endif 
mul r1.xyz, r1.xyzx, cb1[4].xyzx
mad r5.xyz, r1.wwww, cb1[6].xyzx, -r1.xyzx
mad r1.xyz, r2.xxxx, r5.xyzx, r1.xyzx
dp4 r1.w, r0.xyzw, cb1[0].xyzw
ge r2.yzw, r2.yyzw, l(0.000000, 0.500000, 0.500000, 0.500000)
movc r2.yzw, r2.yyzw, r3.xxyz, r4.xxyz
mul r2.x, r2.x, l(0.500000)
add r3.xyz, -r2.yzwy, cb1[11].xyzx
mad r2.xyz, r2.xxxx, r3.xyzx, r2.yzwy
dp4 r0.x, r0.xyzw, cb1[1].xyzw
mul r0.xyz, r0.xxxx, r2.xyzx
mad_sat r0.xyz, r1.xyzx, r1.wwww, r0.xyzx
lt r0.w, l(0.000000), cb0[141].x
if_nz r0.w
  mul r1.xyzw, v4.yyyy, cb0[49].xyzw
  mad r1.xyzw, v4.xxxx, cb0[48].xyzw, r1.xyzw
  mad r1.xyzw, v4.zzzz, cb0[50].xyzw, r1.xyzw
  add r1.xyzw, r1.xyzw, cb0[51].xyzw
  div r1.xyz, r1.xyzx, r1.wwww
  add r1.xyz, r1.xyzx, -cb0[76].xyzx
  imad r0.w, v2.x, l(672), l(16)
  ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r2.xyz, r0.w, t0.xyzx
  add r2.xyz, -r2.xyzx, cb0[64].xyzx
  imad r3.xyzw, v2.xxxx, l(672, 672, 672, 672), l(304, 288, 400, 416)
  ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r4.xyz, r3.x, t0.xyzx
  add r4.xyz, r1.xyzx, -r4.xyzx
  mad r2.xyz, r2.xyzx, l(2097152.000000, 2097152.000000, 2097152.000000, 0.000000), r4.xyzx
  or r3.xyz, r3.yzwy, l(12, 28, 12, 0)
  ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r4.x, r3.x, t0.xxxx
  ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r4.y, r3.y, t0.xxxx
  ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r4.z, r3.z, t0.xxxx
  add r3.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  lt r2.xyz, r3.xyzx, |r2.xyzx|
  or r0.w, r2.y, r2.x
  or r0.w, r2.z, r0.w
  mul r2.xy, l(0.577000, 0.577000, 0.000000, 0.000000), cb0[64].xyxx
  add r1.w, r2.y, r2.x
  mad r1.w, cb0[64].z, l(0.577000), r1.w
  mul r1.xyw, r1.xyxw, l(0.577000, 0.577000, 0.000000, 4194.304199)
  frc r1.w, r1.w
  add r1.x, r1.y, r1.x
  mad r1.x, r1.z, l(0.577000), r1.x
  mad r1.x, r1.x, l(0.002000), r1.w
  frc r1.x, r1.x
  lt r1.x, l(0.500000), r1.x
  movc r1.xyz, r1.xxxx, l(0,1.000000,1.000000,0), l(1.000000,1.000000,0,0)
  movc r0.xyz, r0.wwww, r1.xyzx, r0.xyzx
endif 
mul o0.xyz, r0.xyzx, cb0[136].zzzz
mov o0.w, l(0)
ret 
// Approximately 100 instruction slots used
